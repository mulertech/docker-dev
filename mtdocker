#!/usr/bin/env php
<?php

function getProjectDir(): string
{
    $projectDir = dirname(__DIR__);

    while (!file_exists($projectDir . '/composer.json')) {
        $projectDir = dirname($projectDir);
    }

    return $projectDir;
}

function getPhpVersion(): string
{
    $composer = file_get_contents(getProjectDir() . '/composer.json');
    preg_match('/"php": "(.+)"/', $composer, $matches);
    $php = $matches[1] ?? '';

    if ($php === '') {
        return '';
    }

    preg_match_all('/[\^>=~]+(\d\.\d*)/', $php, $matches);
    return $matches[1][1] ?? $matches[1][0] ?? '';
}

function dbNeeded(): bool
{
    $composer = file_get_contents(getProjectDir() . '/composer.json');
    return str_contains($composer, 'ext-pdo');
}

function isSymfonyProject(): bool
{
    $composer = file_get_contents(getProjectDir() . '/composer.json');
    return str_contains($composer, 'symfony/framework-bundle') 
        || str_contains($composer, 'symfony/symfony')
        || str_contains($composer, 'symfony/kernel');
}

function detectTemplate(): string
{
    // Priority 1: Symfony framework
    if (isSymfonyProject()) {
        return 'symfony';
    }
    
    // Priority 2: Database needed
    if (dbNeeded()) {
        return 'apache-mysql';
    }
    
    // Priority 3: Simple Apache + PHP
    return 'apache-simple';
}

function getContainerName(): string
{
    $phpVersion = getPhpVersion();
    return 'docker-' . basename(getProjectDir()) . '-' . ($phpVersion === '' ? 'latest' : $phpVersion);
}

function getProjectName(): string
{
    return str_replace('.', '-', getContainerName());
}

function getProjectBaseName(): string
{
    return basename(getProjectDir());
}

function addToGitignore(string $projectDir): void
{
    $gitignorePath = $projectDir . '/.gitignore';
    
    if (file_exists($gitignorePath)) {
        $gitignoreContent = file_get_contents($gitignorePath);
        
        // Check if .mtdocker is already ignored
        if (!str_contains($gitignoreContent, '.mtdocker')) {
            $addition = "\n# Docker development environment\n.mtdocker/\n";
            file_put_contents($gitignorePath, $addition, FILE_APPEND);
            echo "Added .mtdocker/ to .gitignore\n";
        }
    } else {
        // Create .gitignore with .mtdocker entry
        $content = "# Docker development environment\n.mtdocker/\n";
        file_put_contents($gitignorePath, $content);
        echo "Created .gitignore with .mtdocker/ entry\n";
    }
}

function getDbPort(): int
{
    // Generate a port between 10000-65000 based on container name hash
    $hash = md5(getContainerName());
    return 10000 + (hexdec(substr($hash, 0, 4)) % 55000);
}

function ensureEnvironment(): void
{
    $projectDir = getProjectDir();
    $mtdockerPath = $projectDir . DIRECTORY_SEPARATOR . '.mtdocker';
    
    if (!file_exists($mtdockerPath . DIRECTORY_SEPARATOR . 'compose.yml')) {
        echo "No .mtdocker environment found. Initializing...\n";
        autoInitTemplate();
    }
}

function autoInitTemplate(): void
{
    // Auto-detect template based on project
    $template = detectTemplate();
    
    $projectDir = getProjectDir();
    $mtdockerPath = $projectDir . DIRECTORY_SEPARATOR . '.mtdocker';
    $templatesPath = __DIR__ . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . $template;

    if (!is_dir($templatesPath)) {
        echo "Error: Template '$template' not found.\n";
        return;
    }

    // Create .mtdocker directory
    mkdir($mtdockerPath, 0755, true);

    // Copy template files (including hidden files)
    exec("cp -r " . escapeshellarg($templatesPath) . "/. " . escapeshellarg($mtdockerPath) . " 2>/dev/null || true");
    exec("cp -r " . escapeshellarg($templatesPath) . "/* " . escapeshellarg($mtdockerPath) . " 2>/dev/null || true");

    // Create .env file from .env.example
    $envExamplePath = $mtdockerPath . DIRECTORY_SEPARATOR . '.env.example';
    $envPath = $mtdockerPath . DIRECTORY_SEPARATOR . '.env';

    if (file_exists($envExamplePath)) {
        $envContent = file_get_contents($envExamplePath);

        // Auto-detect USER_ID and GROUP_ID
        $uid = getmyuid();
        $gid = getmygid();
        $envContent = str_replace(
                ['USER_ID=1000', 'GROUP_ID=1000'],
                ["USER_ID=$uid", "GROUP_ID=$gid"],
                $envContent
        );

        // Auto-detect PHP version and image
        $phpVersion = getPhpVersion();
        $phpImage = 'php:' . ($phpVersion === '' ? '' : $phpVersion . '-') . 'fpm-alpine';
        $envContent = str_replace('PHP_IMAGE=php:fpm-alpine', "PHP_IMAGE=$phpImage", $envContent);

        // Generate container names based on project
        $apacheContainerName = getContainerName(); // docker-database-8-4
        $projectBaseName = getProjectBaseName(); // database
        $envContent = str_replace('CONTAINER_NAME_APACHE=apache-php', "CONTAINER_NAME_APACHE=$apacheContainerName", $envContent);
        $envContent = str_replace('CONTAINER_NAME_MYSQL=mysql-db', "CONTAINER_NAME_MYSQL=$projectBaseName-mysql", $envContent);
        // Symfony template additional containers
        $envContent = str_replace('CONTAINER_NAME_PHPMYADMIN=symfony-phpmyadmin', "CONTAINER_NAME_PHPMYADMIN=$projectBaseName-phpmyadmin", $envContent);
        $envContent = str_replace('CONTAINER_NAME_REDIS=symfony-redis', "CONTAINER_NAME_REDIS=$projectBaseName-redis", $envContent);
        $envContent = str_replace('CONTAINER_NAME_MAILHOG=symfony-mailhog', "CONTAINER_NAME_MAILHOG=$projectBaseName-mailhog", $envContent);

        // Generate available ports
        $envContent = generateAvailablePorts($envContent);

        file_put_contents($envPath, $envContent);
    }

    // Add .mtdocker to .gitignore if .gitignore exists
    addToGitignore($projectDir);
    
    echo "Auto-initialized '$template' template.\n";
}

function dockerComposeCommand(): string
{
    $projectDir = getProjectDir();
    $mtdockerPath = $projectDir . DIRECTORY_SEPARATOR . '.mtdocker';
    
    return 'docker compose -f ' . $mtdockerPath . DIRECTORY_SEPARATOR . 'compose.yml --project-directory ' . $mtdockerPath . ' --project-name ' . getProjectName();
}

function dockerComposeUp(string $arg2): void
{
    ensureEnvironment();
    
    $command = dockerComposeCommand() . ' up';
    $command .= $arg2 === '-d' ? ' -d' : '';
    exec($command);
}

function initTemplate(string $template): void
{
    // Auto-detect template if not specified
    if (empty($template)) {
        $template = detectTemplate();
        echo "Auto-detected template: $template\n";
    }

    $projectDir = getProjectDir();
    $mtdockerPath = $projectDir . DIRECTORY_SEPARATOR . '.mtdocker';
    $templatesPath = __DIR__ . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . $template;

    if (!is_dir($templatesPath)) {
        echo "Template '$template' not found.\n";
        echo "Templates available: apache-simple, apache-mysql, symfony\n";
        return;
    }

    if (is_dir($mtdockerPath)) {
        echo ".mtdocker directory already exists. Do you want to replace it? (y/N): ";
        $handle = fopen("php://stdin", "r");
        $response = trim(fgets($handle));
        fclose($handle);

        if (strtolower($response) !== 'y') {
            echo "Initialization cancelled.\n";
            return;
        }

        exec("rm -rf " . escapeshellarg($mtdockerPath));
    }

    // Create .mtdocker directory
    mkdir($mtdockerPath, 0755, true);

    // Copy template files (including hidden files)
    exec("cp -r " . escapeshellarg($templatesPath) . "/. " . escapeshellarg($mtdockerPath) . " 2>/dev/null || true");
    exec("cp -r " . escapeshellarg($templatesPath) . "/* " . escapeshellarg($mtdockerPath) . " 2>/dev/null || true");

    // Create .env file from .env.example
    $envExamplePath = $mtdockerPath . DIRECTORY_SEPARATOR . '.env.example';
    $envPath = $mtdockerPath . DIRECTORY_SEPARATOR . '.env';

    if (file_exists($envExamplePath)) {
        $envContent = file_get_contents($envExamplePath);

        // Auto-detect USER_ID and GROUP_ID
        $uid = getmyuid();
        $gid = getmygid();
        $envContent = str_replace(
                ['USER_ID=1000', 'GROUP_ID=1000'],
                ["USER_ID=$uid", "GROUP_ID=$gid"],
                $envContent
        );

        // Auto-detect PHP version and image
        $phpVersion = getPhpVersion();
        $phpImage = 'php:' . ($phpVersion === '' ? '' : $phpVersion . '-') . '-fpm-alpine';
        $envContent = str_replace('PHP_IMAGE=php:fpm-alpine', "PHP_IMAGE=$phpImage", $envContent);

        // Generate available ports
        $envContent = generateAvailablePorts($envContent);

        file_put_contents($envPath, $envContent);
        echo ".env file created with your system settings.\n";
    }

    // Add .mtdocker to .gitignore if .gitignore exists
    addToGitignore($projectDir);
    
    echo "Template '$template' initialized successfully in .mtdocker/\n";
    echo "You can now use: ./vendor/bin/mtdocker up -d\n";
}

function generateAvailablePorts(string $envContent): string
{
    $projectName = basename(getProjectDir());

    // Base ports that are always present
    $ports = [
            'APACHE_PORT' => generatePortFromName($projectName)
    ];

    // Add other ports only if they exist in the .env.example
    if (str_contains($envContent, 'MYSQL_PORT=')) {
        $ports['MYSQL_PORT'] = generatePortFromName($projectName . '-mysql');
    }
    if (str_contains($envContent, 'PHPMYADMIN_PORT=')) {
        $ports['PHPMYADMIN_PORT'] = generatePortFromName($projectName . '-phpmyadmin');
    }
    if (str_contains($envContent, 'REDIS_PORT=')) {
        $ports['REDIS_PORT'] = generatePortFromName($projectName . '-redis');
    }
    if (str_contains($envContent, 'MAILHOG_PORT=')) {
        $ports['MAILHOG_PORT'] = generatePortFromName($projectName . '-mailhog');
    }
    if (str_contains($envContent, 'MAILHOG_SMTP_PORT=')) {
        $ports['MAILHOG_SMTP_PORT'] = generatePortFromName($projectName . '-mailhog-smtp');
    }

    foreach ($ports as $varName => $port) {
        $envContent = preg_replace("/^$varName=\d+$/m", "$varName=$port", $envContent);
    }

    return $envContent;
}

function generatePortFromName(string $name): int
{
    // Generate a deterministic port based on the name hash
    $hash = md5($name);
    // Convert first 4 hex chars to decimal and map to port range 10000-65000
    $port = 10000 + (hexdec(substr($hash, 0, 4)) % 55000);

    // Ensure the port is available, if not increment until we find one
    return findAvailablePortFromBase($port);
}

function findAvailablePortFromBase(int $basePort): int
{
    // Start from the base port and find the first available one
    for ($port = $basePort; $port < $basePort + 100; $port++) {
        $connection = @fsockopen('127.0.0.1', $port, $errno, $errstr, 1);
        if (!$connection) {
            return $port;
        }
        fclose($connection);
    }

    // If no port is available in the range, fall back to the base port
    return $basePort;
}

function dockerComposeDown(): void
{
    ensureEnvironment();
    $command = dockerComposeCommand() . ' down';
    exec($command);
}

function isDockerUp(): bool
{
    return str_contains(exec('docker compose ls | grep ' . getProjectName()), getProjectName());
}

function test(string $options = ''): void
{
    $containerName = getContainerName();
    $dockerUp = isDockerUp();

    if (!$dockerUp) {
        dockerComposeUp('-d');
    }

    $cmd = 'docker exec -it ' . $containerName . ' ./vendor/bin/phpunit ' . $options;
    $output = shell_exec($cmd);
    echo $output;

    if (!$dockerUp) {
        dockerComposeDown();
    }
}

function phpStan(): void
{
    $containerName = getContainerName();
    $dockerUp = isDockerUp();

    if (!$dockerUp) {
        dockerComposeUp('-d');
    }

    $cmd = 'docker exec -it ' . $containerName . ' ./vendor/bin/phpstan analyse --memory-limit=1G';
    $output = shell_exec($cmd);
    echo $output;

    if (!$dockerUp) {
        dockerComposeDown();
    }
}

function phpCsFixer(): void
{
    $containerName = getContainerName();
    $dockerUp = isDockerUp();

    if (!$dockerUp) {
        dockerComposeUp('-d');
    }

    $cmd = 'docker exec -it ' . $containerName . ' ./vendor/bin/php-cs-fixer fix src';
    $output = shell_exec($cmd);
    echo $output;

    if (!$dockerUp) {
        dockerComposeDown();
    }
}

function symfony(): void
{
    global $argv;
    
    if (!isSymfonyProject()) {
        echo "Error: This command is only available for Symfony projects.\n";
        return;
    }

    $containerName = getContainerName();
    $dockerUp = isDockerUp();

    if (!$dockerUp) {
        dockerComposeUp('-d');
    }

    // Get command arguments starting from index 2 (after 'symfony')
    $consoleArgs = array_slice($argv, 2);
    $consoleCommand = implode(' ', array_map('escapeshellarg', $consoleArgs));
    
    $cmd = 'docker exec -it ' . $containerName . ' php bin/console ' . $consoleCommand;
    $output = shell_exec($cmd);
    echo $output;

    if (!$dockerUp) {
        dockerComposeDown();
    }
}

$arg1 = $_SERVER['argv'][1] ?? '';
$arg2 = $_SERVER['argv'][2] ?? '';

if ($arg1 === 'test-coverage') {
    test('--coverage-html ./.phpunit.cache/coverage');
}

if ($arg1 === 'test') {
    test();
}

if ($arg1 === 'up') {
    dockerComposeUp($arg2);
}

if ($arg1 === 'down') {
    dockerComposeDown();
}

if ($arg1 === 'phpstan') {
    phpStan();
}

if ($arg1 === 'cs-fixer') {
    phpCsFixer();
}

if ($arg1 === 'all') {
    phpCsFixer();
    test();
    phpStan();
}

if ($arg1 === 'ps') {
    $containerName = getContainerName();
    $dockerUp = isDockerUp();

    if (!$dockerUp) {
        dockerComposeUp('-d');
    }

    $cmd = dockerComposeCommand() . ' ps';
    var_dump($cmd);
    $output = shell_exec($cmd);
    echo $output;

    if (!$dockerUp) {
        dockerComposeDown();
    }
}

if ($arg1 === 'name') {
    echo getProjectName() . PHP_EOL;
}

if ($arg1 === 'init') {
    initTemplate($arg2);
}

if ($arg1 === 'symfony') {
    symfony();
}